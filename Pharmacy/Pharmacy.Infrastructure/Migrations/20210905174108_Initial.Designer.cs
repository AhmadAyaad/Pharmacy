// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZPharmacy.Infrastructure.Data;

namespace ZPharmacy.Infrastructure.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20210905174108_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ISEligibleToSellToPatients")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentPharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentPharmacyId");

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISEligibleToSellToPatients = false,
                            Name = "مجانى",
                            PharmacyType = 0
                        },
                        new
                        {
                            Id = 2,
                            ISEligibleToSellToPatients = false,
                            Name = "تأمين",
                            PharmacyType = 0
                        },
                        new
                        {
                            Id = 3,
                            ISEligibleToSellToPatients = true,
                            Name = "نفقة",
                            PharmacyType = 0
                        });
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalCode")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("NationalCode")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.ProductQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TotalProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductQuantities");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.SupplyOrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApprovalNumber")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrdersId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyOrderNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierOrdersId");

                    b.ToTable("SupplyOrderDetails");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.SupplyOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportOrderNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SupplyOrders");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UnitName = "قرص"
                        },
                        new
                        {
                            Id = 2,
                            UnitName = "فيال"
                        },
                        new
                        {
                            Id = 3,
                            UnitName = "زجاجة"
                        });
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Pharmacy", b =>
                {
                    b.HasOne("ZPharmacy.Domain.Entities.Pharmacy", "ParentPharmacy")
                        .WithMany("ChildrenPharmacies")
                        .HasForeignKey("ParentPharmacyId");

                    b.Navigation("ParentPharmacy");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Product", b =>
                {
                    b.HasOne("ZPharmacy.Domain.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.ProductQuantity", b =>
                {
                    b.HasOne("ZPharmacy.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZPharmacy.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.SupplyOrderDetails", b =>
                {
                    b.HasOne("ZPharmacy.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZPharmacy.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZPharmacy.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZPharmacy.Domain.Entities.SupplyOrders", "SupplyOrders")
                        .WithMany("SupplyOrdersDetails")
                        .HasForeignKey("SupplierOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("SupplyOrders");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.Pharmacy", b =>
                {
                    b.Navigation("ChildrenPharmacies");
                });

            modelBuilder.Entity("ZPharmacy.Domain.Entities.SupplyOrders", b =>
                {
                    b.Navigation("SupplyOrdersDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
